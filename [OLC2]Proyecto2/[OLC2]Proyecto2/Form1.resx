<root>
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTxtEntrada.Text" xml:space="preserve">
    <value>
program Hello;

var var1 : integer;

procedure aaa;
    var var2 : integer;
    procedure bbb();
			
			
        procedure ccc();
            
            procedure ddd();
                var var2 : integer = 66;
                var var1 : integer = 69;
            begin
                writeln ('Hello ddd');
                writeln ('===&gt;',var1);
                writeln ('===&gt;',var2);
            end;
            
            procedure eee();

            begin
                var1:=3;
                writeln ('Hello eee: ',var1);
                ddd();
            end;
        begin
            writeln ('Hello ccc');
            eee();
            ddd();
        end;
    begin
        writeln ('Hello bbb');
        ccc();
    end;
begin
var1:=50;
var2:=0;
    writeln ('Hello aaa: ',var1);
    bbb();
    
end;

procedure ccc();
    procedure aaa();

    begin
        writeln ('PROCED bbb');
    end;

begin
    var1:=200;
    writeln ('Hello ccc2: ',var1);
    aaa();
    aaa();
end;

begin
var1:=1;
  writeln ('Hello World : ',var1);
  ccc();
end.</value>
  </data>
  <data name="richTxtSalida.Text" xml:space="preserve">
    <value>
program Hello;

var var1 : integer = 100;

procedure aaa;
        var var2 : integer = 25;
    begin
        writeln ('Hello aaa: ',var2);
end;

procedure ccc();
     var var8 : integer = 50;
begin

    writeln ('Hello ccc: ',var8);
end;

begin
  writeln ('Hello World : ',var1);
  ccc();
end.</value>
  </data>
</root>